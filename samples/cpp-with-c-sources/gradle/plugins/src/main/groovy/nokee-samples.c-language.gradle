import dev.nokee.commons.names.CppNames
import dev.nokee.commons.names.NamingScheme

import static dev.nokee.companion.CppBinaryTaskExtensions.compileTask

components.withType(CppComponent).configureEach { component ->
	component.binaries.configureEach { binary ->
		def names = CppNames.of(binary)
		compileTasks.addLater tasks.register(names.compileTaskName('c').toString(), CCompile) {
			debuggable = names.get('buildTypeName') == 'debug'
			optimized = names.get('buildTypeName') == 'release'
			positionIndependentCode = true
			targetPlatform = compileTask.flatMap { it.targetPlatform }
			toolChain = compileTask.flatMap { it.toolChain }
			objectFileDir = layout.buildDirectory.dir('obj/' + names.append('c').toString(NamingScheme.dirNames()))
			includes(component.privateHeaderDirs)
			source(fileTree("src/${component.name}/c"))
		}
		compileTask(binary).configure {
			objectFileDir = layout.buildDirectory.dir('obj/' + names.append('cpp').toString(NamingScheme.dirNames()))
		}
	}
}
