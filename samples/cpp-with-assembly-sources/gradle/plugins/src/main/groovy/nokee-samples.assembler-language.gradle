import dev.nokee.commons.names.CppNames
import dev.nokee.commons.names.NamingScheme

import static dev.nokee.companion.CppBinaryTaskExtensions.*

components.withType(CppComponent).configureEach { component ->
	component.binaries.configureEach { binary ->
		def names = CppNames.of(binary)
		compileTasks.addLater tasks.register(names.compileTaskName('asm').toString(), Assemble) {
			targetPlatform = compileTask.flatMap { it.targetPlatform }
			toolChain = compileTask.flatMap { it.toolChain }
			objectFileDir = layout.buildDirectory.dir(names.append('asm').toString(NamingScheme.dirNames())).get().asFile
			includes(component.privateHeaderDirs)
			source({
				def languageName = 'asm'
				if (toolChain.get() instanceof VisualCpp) {
					languageName = 'masm'
				}
				return fileTree("src/${names.get('architectureName')}/${languageName}")
			})
			assemblerArgs = []
		}
		compileTask(binary).configure {
			objectFileDir = layout.buildDirectory.dir(names.append('cpp').toString(NamingScheme.dirNames()))
		}
	}
}
