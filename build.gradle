plugins {
	id 'java-gradle-plugin'
	id 'jvm-test-suite'
	id 'dev.nokee.samples.generators'
	id 'dev.nokee.samples.copy-source-ex'
	id 'nokeebuild.publishing'
	id 'nokeebuild.signing'
	id 'nokeebuild.test-kit-directory-in-test-suites'
	id 'nokeebuild.use-latest-java-lts-in-test-suites'
	id 'nokeebuild.use-junit-platform-in-test-suites'
	id 'nokeebuild.code-templates'
}

group = 'dev.nokee'
version = '1.0-milestone-37'
description = 'Quality-of-life enhancements for Gradle core native plugins.'

repositories {
	mavenLocal()
	mavenCentral()
	gradlePluginPortal()
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.named('javadoc', Javadoc) {
	options {
		windowTitle 'Nokee Companion'
		showFromPublic()

		addStringOption('Xdoclint:all,-missing')
	}
}

gradlePlugin {
	website = 'https://nokee.dev'
	vcsUrl = 'https://github.com/nokeedev/nokee-companion'
	plugins {
		legacy {
			id = 'dev.nokee.native-companion'
			implementationClass = 'dev.nokee.companion.LegacySupportPlugin'
			displayName = 'Nokee Native Companion'
			description = 'Provides quality-of-life enhancements for Gradle core native plugins.'
			tags = ['c++', 'cpp', 'native', 'gradle-native', 'cpp-library', 'cpp-application']
		}
	}

	dependencies {
		implementation libs.nokee.commons.names
		implementation libs.nokee.commons.backports
		implementation libs.nokee.commons.gradle

		implementation libs.apache.commons.io

		implementation libs.nokee.plugins.multiplatform.publishing
	}
}

testing {
	suites {
		test {
			dependencies {
				implementation 'dev.gradleplugins:gradle-api:latest.release'
				implementation libs.hamcrest.core
				implementation 'dev.nokee.commons:commons-hamcrest:latest.integration'
				implementation testFixtures('dev.nokee.commons:commons-gradle:latest.integration')
				implementation 'dev.nokee.templates:nokee-code-templates:latest.integration'
				implementation('com.google.guava:guava:33.4.6-jre') { because 'TypeToken' }
			}
		}
		functionalTest(JvmTestSuite) {
			dependencies {
				implementation gradleTestKit()
				implementation 'commons-io:commons-io:latest.release'
				implementation libs.apache.commons.lang3
				implementation 'dev.nokee.commons:test-gradle-projects:latest.release'
				implementation 'dev.gradleplugins:elements:latest.release'
				implementation 'dev.nokee.templates:nokee-code-templates:latest.integration'
				implementation 'dev.gradleplugins:gradle-runner-kit:latest.release'
				implementation 'org.jetbrains:annotations:26.0.2'
				implementation libs.hamcrest.core
				implementation 'dev.nokee.commons:commons-names:latest.release'
				implementation testFixtures('dev.nokee.commons:commons-gradle:latest.integration')
				implementation testFixtures('dev.gradleplugins:gradle-runner-kit:latest.release')
				implementation 'dev.nokee.commons:commons-hamcrest:latest.integration'
			}
		}
		samplesTest(JvmTestSuite) {
			targets.all {
				testTask.configure {
					samples.samples.all {
						systemProperty it.name, it.sampleDir.get().asFile.absolutePath
					}
				}
			}

			dependencies {
				implementation gradleTestKit()
				implementation 'commons-io:commons-io:latest.release'
				implementation 'dev.gradleplugins.exemplar:commons-exemplar:latest.integration'
				implementation 'dev.nokee.commons:test-gradle-projects:latest.release'
				implementation libs.hamcrest.core
				implementation 'dev.gradleplugins:gradle-runner-kit:latest.release'
			}
		}
	}
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)
gradlePlugin.testSourceSets.add(sourceSets.samplesTest)


import dev.nokee.elements.nativebase.NativeSourceElement
import dev.nokee.platform.jni.fixtures.GreeterAppWithJniLibrary
import dev.nokee.templates.CppApp
import dev.nokee.templates.CppList
import dev.nokee.templates.CppMessage
import dev.nokee.templates.CppUtilities

import java.nio.file.Files

samples {
	samples.configureEach { sampleDir = file("samples/${it.name}") }

	samples.register('cpp-binary-task-extensions') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('app').fromTemplate(new CppMessage().asImplementation())
			project('lib').fromTemplate(new CppUtilities().withDllExport())
			project('lib').fromTemplate(new CppList().withDllExport())
		}
	}
	samples.register('cpp-compile-detects-source-file-relocation') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			new CppMessage().asImplementation().with { message ->
				project('app').fromTemplate(message.withoutHeaders())
				project('app').fromTemplate { location ->
					message.headers.writeToDirectory(location.resolve('src/main/cpp'))
				}
			}
			project('app').fromTemplate(new CppUtilities().asImplementation())
			project('app').fromTemplate(new CppList().asImplementation())
			project('app').fromTemplate { location ->
				Files.createFile(Files.createDirectories(location.resolve('src/main/cpp/dir')).resolve('.placeholder'))
			}
		}
	}
	samples.register('cpp-compile-incremental-after-failure') {

	}
	samples.register('cpp-compile-object-files-extension') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('app').fromTemplate([new CppMessage(), new CppUtilities(), new CppList()]*.asImplementation())
		}
	}
	samples.register('cpp-compile-options-per-source-files') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('app').fromTemplate(new CppMessage().asImplementation())
			project('lib').fromTemplate(new CppUtilities().withDllExport(), new CppList().withDllExport())
		}
	}
	samples.register('cpp-dependencies-version-catalog-support') {

	}
	samples.register('cpp-dependency-on-generated-public-headers') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())

			def libs = NativeSourceElement.ofElements([new CppMessage(), new CppList(), new CppUtilities()]*.withDllExport())
			project('lib').fromTemplate(libs.withoutPublicHeaders())
			project('lib').fromTemplate(libs.publicHeaders.asZip('cpp-api-headers.zip'))
		}
	}
	samples.register('cpp-multiple-compile-tasks') {

	}
	samples.register('cpp-multiple-public-header-directories') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('message').fromTemplate(new CppMessage().withDllExport().withoutPublicHeaders())
			project('utilities').fromTemplate([new CppUtilities(), new CppList()]*.withDllExport()*.withoutPublicHeaders())
			project('.').fromTemplate {
				new CppMessage().publicHeaders.writeToDirectory(it.resolve('includes/message'))
				new CppUtilities().publicHeaders.writeToDirectory(it.resolve('includes/utilities'))
				new CppList().publicHeaders.writeToDirectory(it.resolve('includes/list'))
			}
		}
	}
	samples.register('cpp-source-patterns') {

	}
	samples.register('cpp-additional-publishing-attributes') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('lib').fromTemplate(new CppMessage().withDllExport())
			project('lib').fromTemplate(new CppUtilities().withDllExport())
			project('lib').fromTemplate(new CppList().withDllExport())
		}
	}
	samples.register('cpp-additional-publishing-variants') {
		source {
			project('.').buildRoot()
			def app = new GreeterAppWithJniLibrary('greeter')
			project('app').fromTemplate(app.application)
			project('lib').fromTemplate(app.library)
		}
	}
	samples.register('cpp-compiler-argument-providers') {
		source {
			project('.').buildRoot()
			project('.').fromTemplate(new CppApp().withoutImplementation())
			project('.').fromTemplate([new CppMessage(), new CppUtilities(), new CppList()]*.asImplementation())
		}
	}
	samples.register('cpp-with-c-sources')
	samples.register('cpp-with-assembly-sources')
	samples.register('cpp-gnu-coverage') {
		source {
			project('.').buildRoot()
			project('app').fromTemplate(new CppApp().withoutImplementation())
			project('app').fromTemplate(new CppMessage().asImplementation())
			project('utils').fromTemplate(new CppUtilities().withDllExport())
			project('list').fromTemplate(new CppList().withDllExport())
		}
	}
	samples.register('cpp-unit-test-tested-component-integration')

	samples.register('cpp-overlinking-avoidance')
}
